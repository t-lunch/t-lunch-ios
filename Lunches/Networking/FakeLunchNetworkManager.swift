//
//  FakeLunchNetworkManager.swift
//  Lunches
//
//  Created by –ê–Ω–¥—Ä–µ–π –°—Ç–µ–ø–∞–Ω–æ–≤ on 16.04.2025.
//

import Foundation

final class FakeLunchNetworkManager: LunchNetworkManagerProtocol {
    let authManager: AuthManager
    
    init(authManager: AuthManager) {
        self.authManager = authManager
    }

    func registration(request: RegistrationRequest, completion: @escaping (User?) -> Void) {
        let user = User(userId: 1, name: request.name, surname: request.surname, tg: request.tg, office: request.office, emoji: request.emoji)
        completion(user)
    }

    func login(request: LoginRequest, completion: @escaping (LoginResponse?) -> Void) {
        let response = LoginResponse(accessToken: "fakeAccessToken", refreshToken: "fakeRefreshToken")
        authManager.setIsAuthorized(to: true)
        completion(response)
    }

    func refresh(token: String, completion: @escaping (RefreshResponse?) -> Void) {
        let response = RefreshResponse(accessToken: "newFakeAccessToken")
        authManager.setIsAuthorized(to: true)
        completion(response)
    }

    func getProfile(userId: Int64, completion: @escaping (User?) -> Void) {
        let user = User(userId: userId, name: "–ò–≤–∞–Ω", surname: "–ò–≤–∞–Ω–æ–≤", tg: "@ivan", office: "A101", emoji: "üòé")
        completion(user)
    }

    func changeProfile(user: User, completion: @escaping (User?) -> Void) {
        completion(user)
    }

    func getLunches(userId: Int64, offset: Int32, limit: Int32, completion: @escaping ([Lunch]) -> Void) {
        let lunch = Lunch(id: 1, name: "–ê–Ω–Ω–∞", surname: "–ü–µ—Ç—Ä–æ–≤–∞", place: "–ö–∞—Ñ–µ '–ï–¥–∞'", time: Date(), numberOfParticipants: 3, description: "–û–±–µ–¥ –≤—Å–µ–π –∫–æ–º–∞–Ω–¥–æ–π", users: [])
        completion([lunch])
    }

    func createLunch(request: CreateLunchRequest, completion: @escaping (LunchResponse?) -> Void) {
        let lunch = Lunch(id: 1, name: "–ê–Ω–Ω–∞", surname: "–ü–µ—Ç—Ä–æ–≤–∞", place: request.place, time: Date(), numberOfParticipants: 1, description: request.description, users: [])
        completion(LunchResponse(lunch: lunch))
    }

    func joinLunch(lunchId: Int64, userId: Int64, completion: @escaping (LunchResponse?) -> Void) {
        let lunch = Lunch(id: lunchId, name: "–ê–Ω–Ω–∞", surname: "–ü–µ—Ç—Ä–æ–≤–∞", place: "–ö–∞—Ñ–µ", time: Date(), numberOfParticipants: 4, description: "–û–±–µ–¥", users: [])
        completion(LunchResponse(lunch: lunch))
    }

    func leaveLunch(lunchId: Int64, userId: Int64, completion: @escaping (LunchResponse?) -> Void) {
        let lunch = Lunch(id: lunchId, name: "–ê–Ω–Ω–∞", surname: "–ü–µ—Ç—Ä–æ–≤–∞", place: "–ö–∞—Ñ–µ", time: Date(), numberOfParticipants: 2, description: "–û–±–µ–¥", users: [])
        completion(LunchResponse(lunch: lunch))
    }

    func getDetailLunch(lunchId: Int64, completion: @escaping (LunchResponse?) -> Void) {
        let lunch = Lunch(id: lunchId, name: "–ê–Ω–Ω–∞", surname: "–ü–µ—Ç—Ä–æ–≤–∞", place: "–ö–∞—Ñ–µ", time: Date(), numberOfParticipants: 3, description: "–î–µ—Ç–∞–ª–∏ –æ–±–µ–¥–∞", users: [])
        completion(LunchResponse(lunch: lunch))
    }

    func getLunchHistory(userId: Int64, completion: @escaping ([Lunch]) -> Void) {
        let lunch = Lunch(id: 42, name: "–ò–≥–æ—Ä—å", surname: "–ö", place: "–ü–µ–ª—å–º–µ–Ω–Ω–∞—è", time: Date(), numberOfParticipants: 5, description: "–ò—Å—Ç–æ—Ä–∏—è –æ–±–µ–¥–æ–≤", users: [])
        completion([lunch])
    }

    func rateLunch(userId: Int64, lunchId: Int64, isLiked: Bool, completion: @escaping (LunchFeedback?) -> Void) {
        let lunch = Lunch(id: lunchId, name: "–ê–Ω–Ω–∞", surname: "–ü–µ—Ç—Ä–æ–≤–∞", place: "–ö–∞—Ñ–µ", time: Date(), numberOfParticipants: 3, description: nil, users: [])
        let feedback = LunchFeedback(lunch: lunch, isLiked: isLiked)
        completion(feedback)
    }
}
